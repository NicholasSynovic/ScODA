import scoda.datasets.generic
from scoda.db.document.generic import DocumentDB


class CouchDB(DocumentDB):
    def batch_upload(self, dataset: scoda.datasets.generic.Dataset) -> None: ...

    def batch_read(self, table_name: str) -> None: ...

    def create(self) -> None: ...

    def delete(self) -> None: ...

    def query_average_value(
        self,
        table_name: str,
        column_name: str,
    ) -> None: ...

    def query_groupby_time_window_value(
        self,
        table_name: str,
        column_name: str,
    ) -> None: ...

    def query_max_value(self, table_name: str, column_name: str) -> None: ...

    def query_min_value(self, table_name: str, column_name: str) -> None: ...

    def query_mode_value(self, table_name: str, column_name: str) -> None: ...

    def sequential_read(self, table_name: str, rows: int) -> None: ...

    def sequential_upload(self, dataset: scoda.datasets.generic.Dataset) -> None: ...


class MongoDB(DocumentDB):
    def batch_upload(self, dataset: scoda.datasets.generic.Dataset) -> None: ...

    def batch_read(self, table_name: str) -> None: ...

    def create(self) -> None: ...

    def delete(self) -> None: ...

    def query_average_value(
        self,
        table_name: str,
        column_name: str,
    ) -> None: ...

    def query_groupby_time_window_value(
        self,
        table_name: str,
        column_name: str,
    ) -> None: ...

    def query_max_value(self, table_name: str, column_name: str) -> None: ...

    def query_min_value(self, table_name: str, column_name: str) -> None: ...

    def query_mode_value(self, table_name: str, column_name: str) -> None: ...

    def recreate(self) -> None:
        self.delete()
        self.create()

    def sequential_read(self, table_name: str, rows: int) -> None: ...

    def sequential_upload(self, dataset: scoda.datasets.generic.Dataset) -> None: ...
